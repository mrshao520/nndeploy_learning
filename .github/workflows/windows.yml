# GitHub Actions 工作流配置文件 - Windows平台编译
# 该文件用于配置在Windows环境下自动编译项目的CI/CD流程

name: Windows  # 工作流名称，会显示在GitHub Actions界面中

# 触发条件配置
on:
  # 当代码推送到指定分支时触发
  push:
    branches:
      - main  # 仅当推送到main分支时触发
      - develop  # 仅当推送到develop分支时触发
      - 'feature/**'
    paths:  # 仅当以下路径的文件发生变化时才触发构建
      - 'framework/**'     # 框架核心代码目录
      - 'plugin/**'        # 插件扩展代码目录
      - 'python/src/**'    # Python绑定代码目录(pybind11相关)
      - 'test/**'          # 单元测试和集成测试代码目录
      - 'demo/**'          # 示例和演示代码目录
      - 'cmake/**'         # CMake构建配置文件目录
      - 'CMakeLists.txt'   # 项目主要的CMake构建配置文件
      - '.github/workflows/windows.yml'  # 当前工作流文件自身
  # 当创建Pull Request到指定分支时触发
  pull_request:
    branches: [main]  # 仅当PR目标分支为main时触发
    paths:  # 与push相同的路径过滤条件
      - 'framework/**'     # 框架核心代码目录
      - 'plugin/**'        # 插件扩展代码目录
      - 'python/src/**'    # Python绑定代码目录
      - 'test/**'          # 测试代码目录
      - 'demo/**'          # 示例代码目录
      - 'cmake/**'         # CMake配置文件目录
      - 'CMakeLists.txt'   # 主CMake构建文件
      - '.github/workflows/windows.yml'  # 当前工作流文件

# 工作任务定义
jobs:
  build:  # 任务ID
    name: Windows编译构建  # 任务显示名称
    runs-on: windows-latest  # 指定运行环境为最新版Windows
  
    steps:  # 构建步骤序列
      # 第一步：检出源代码
      - name: 检出代码
        uses: actions/checkout@v4  # 使用GitHub官方提供的代码检出Action(v4版本)
        with:
          submodules: recursive  # 递归检出所有子模块(git submodule)
          
      # 第二步：设置Visual Studio环境
      - name: 设置Visual Studio构建环境
        uses: microsoft/setup-msbuild@v1.1  # 设置MSBuild构建工具
        
      - name: 安装Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
        
      - name: 更新Python依赖
        run: |
          python -m pip install --upgrade pip
          pip install pybind11 setuptools wheel twine requests pathlib

      - name: 安装Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc

      # 安装opencv
      - name: 安装OpenCV && ONNXRUNTIME
        run: |
          cd tool/script
          python install_opencv.py
          python install_onnxruntime.py
            
      # 第四步：配置CMake构建环境
      - name: 配置构建
        run: |
          mkdir build                    # 创建构建目录(out-of-source构建)
          cp cmake/config_opencv_ort_tokenizer.cmake build/config.cmake   # 复制项目特定的CMake配置文件
          cd build                       # 进入构建目录
          cmake -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release ..  # 配置CMake项目并指定vcpkg工具链
          
      # 第五步：执行编译
      - name: 编译
        run: |
          cd build                                      # 进入构建目录
          cmake --build . --config Release -j 4        # 使用Release配置并行编译
          
      # 第六步：验证编译结果
      - name: 编译结果检查
        run: |
          cd build              # 进入构建目录
          dir                   # 列出所有生成的文件和目录
          echo "编译完成"       # 输出完成信息
