name: 构建并上传到TestPyPI (Linux多架构)

on:
  workflow_dispatch:
  push:
    branches:
      - testpypi

jobs:
  build_wheels:
    name: 构建 Linux wheels
    runs-on: ubuntu-latest

    steps:
      # 使用最新的checkout版本（在宿主机上运行，无兼容性问题）
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # 设置QEMU支持ARM架构
      - name: 设置QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # 安装系统依赖
      - name: 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config
      
      # 新增：预构建步骤，生成setup.py
      - name: 预构建C++库并生成Python配置
        run: |
          # 安装基础Python依赖
          python3 -m pip install --upgrade pip setuptools wheel pybind11 cython
          
          # 安装Rust
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup update
          
          # 安装OpenCV和ONNX Runtime（使用系统Python）
          cd tool/script
          python3 install_opencv.py
          python3 install_onnxruntime.py
          
          # 构建C++库
          cd ../..
          mkdir -p build
          cp cmake/config_opencv_ort_tokenizer.cmake.cmake build/config.cmake
          cd build
          
          cmake -G Ninja .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DPython3_EXECUTABLE=$(which python3)
          
          ninja -j$(nproc)
          ninja install
          
          # 验证setup.py是否已生成
          echo "=== 检查生成的Python配置文件 ==="
          ls -la ../python/
          if [ -f ../python/setup.py ]; then
            echo "✓ setup.py 已生成"
            head -20 ../python/setup.py
          else
            echo "✗ setup.py 未生成"
            exit 1
          fi

      # 使用cibuildwheel构建wheels
      - name: 构建wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          # 构建配置
          CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-musllinux*"
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          
          # 使用manylinux_2_28获得更好的兼容性
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
          CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux_2_28"
          
          CIBW_BUILD_VERBOSITY: 2
          
          # 在构建前安装系统依赖
          CIBW_BEFORE_ALL_LINUX: |
            # 更新包管理器
            if command -v yum > /dev/null; then
                yum update -y
                yum install -y cmake ninja-build pkgconfig protobuf-compiler protobuf-devel gcc-toolset-11-gcc gcc-toolset-11-gcc-c++
                source /opt/rh/gcc-toolset-11/enable
            elif command -v apt-get > /dev/null; then
                apt-get update
                apt-get install -y cmake ninja-build pkg-config protobuf-compiler libprotobuf-dev
            fi
            
            # 安装Rust
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source $HOME/.cargo/env
            rustup update

          CIBW_BEFORE_BUILD: |
            # 激活工具链
            if [ -f /opt/rh/gcc-toolset-11/enable ]; then
                source /opt/rh/gcc-toolset-11/enable
            fi
            source $HOME/.cargo/env
            
            # 安装OpenCV和ONNX Runtime
            cd {project}/tool/script
            python install_opencv.py
            python install_onnxruntime.py
            
            # 构建C++库
            cd {project}
            # rm -rf build/
            mkdir -p build
            cp cmake/config_opencv_ort_tokenizer.cmake.cmake build/config.cmake
            cd build
            
            # 设置编译器
            export CC=gcc
            export CXX=g++
            
            cmake -G Ninja .. \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DCMAKE_CXX_FLAGS="-fPIC" \
              -DCMAKE_C_FLAGS="-fPIC" \
              -DPython3_EXECUTABLE=$(which python)
            
            ninja -j$(nproc)
            ninja install
            
            # 安装Python构建依赖
            pip install --upgrade pip setuptools wheel pybind11 cython

          # 测试构建的wheel
          CIBW_TEST_COMMAND: |
            python -c "
            import platform
            try:
                import nndeploy
                print(f'✓ 成功导入 nndeploy {nndeploy.__version__}')
                print(f'平台: {platform.platform()}')
                print(f'架构: {platform.machine()}')
            except ImportError as e:
                print(f'✗ 导入失败: {e}')
                exit(1)
            "

          # 环境变量
          CIBW_ENVIRONMENT: |
            PATH=$PATH:$HOME/.cargo/bin

        with:
          package-dir: ./python

      # 验证生成的wheels
      - name: 验证wheels
        run: |
          ls -la wheelhouse/
          echo "=== 生成的wheel文件 ==="
          for wheel in wheelhouse/*.whl; do
            echo "✓ $(basename $wheel)"
            # 检查架构标签
            if [[ "$wheel" == *"x86_64"* ]]; then
              echo "  架构: x86_64"
            elif [[ "$wheel" == *"aarch64"* ]]; then
              echo "  架构: ARM64"
            fi
          done

      # 上传artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: linux-wheels
          path: ./wheelhouse/*.whl

  upload_testpypi:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: wheels/
          
      - name: 合并wheels
        run: |
          mkdir -p dist/
          find wheels/ -name "*.whl" -exec cp {} dist/ \;
          ls -la dist/

      - name: 验证Token配置
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_NNDEPLOY_TOKEN }}
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "ERROR: TEST_PYPI_NNDEPLOY_TOKEN is empty!"
            exit 1
          fi
          echo "Token configuration looks OK"

      - name: 上传到TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_NNDEPLOY_TOKEN }}
        run: |
          pip install twine
          twine check dist/*
          twine upload --repository testpypi dist/* --verbose --skip-existing